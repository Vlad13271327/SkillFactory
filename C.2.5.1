from random import randint


class BoardException(Exception):
    pass

class BoardOutException(BoardException):
    def __str__(self):
        return "Вы пытаетесь выстрелить за доску"

class BoardUsedException(BoardException):
    def __str__(self):
        return "Вы уже стреляли по этим координатам!"

class BoardWrongShipException(BoardException):
    pass


class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def __repr__(self):
        return f"Dot({self.x}, {self.y})"


class Ship:
    def __init__(self, bow_of_the_ship, lenght, orientation):
        self.bow_of_the_ship = bow_of_the_ship
        self.lenght = lenght
        self.orientation = orientation
        self.lives = lenght

    @property
    def dots(self):
        ship_dots = []
        for i in range(self.lenght):
            current_x = self.bow_of_the_ship.x
            current_y = self.bow_of_the_ship.y

            if self.orientation == 0:
                current_x += i

            elif self.orientation == 1:
                current_y += i

            ship_dots.append(Dot(current_x, current_y))

        return ship_dots

    def shooten(self, shot):
        return shot in self.dots


class Board:
    def __init__(self, hidden=False, size=6):
        self.size = size
        self.hidden = hidden

        self.count_sunken_ships = 0

        self.field = [["O"]*size for _ in range(size)]
        self.busy_dots = []
        self.ships = []

    def __str__(self):
        res = ""
        res += "  | 1 | 2 | 3 | 4 | 5 | 6 |"
        for i, row in enumerate(self.field):
            res += f"\n{i+1} | " + " | ".join(row) + " |"

        if  self.hidden:
            res = res.replace("■", "O")
        return res

    def out(self, dot):
        return not ((0 <= dot.x < self.size) and (0 <= dot.y < self.size))

    def contour(self, ship, verb=False):
        near = [(-1, -1), (-1, 0), (-1, 1),
                (0, -1), (0, 0), (0, 1),
                (1, -1), (1, 0), (1, 1)]

        for dot in ship.dots:
            for dotx, doty in near:
                current_dot = Dot(dot.x + dotx, dot.y +doty)
                if not (self.out(current_dot)) and current_dot not in self.busy_dots:
                    if verb:
                        self.field[current_dot.x][current_dot.y] = "."
                    self.busy_dots.append(current_dot)

    def add_ship(self, ship):
        for dot in ship.dots:
            if self.out(dot) or dot in self.busy_dots:
                raise BoardWrongShipException()
        for dot in ship.dots:
            self.field[dot.x][dot.y] = "■"
            self.busy_dots.append(dot)

        self.ships.append(ship)
        self.contour(ship)

    def shot(self, dot):
        if self.out(dot):
            raise BoardOutException

        if dot in self.busy_dots:
            raise BoardUsedException

        self.busy_dots.append(dot)

        for ship in self.ships:
            if ship.shooten(dot):
                ship.lives -= 1
                self.field[dot.x][dot.y] = "X"
                if ship.lives == 0:
                    self.count_sunken_ships += 1
                    self.contour(ship, verb = True)
                    print("Корабль уничтожен!")
                    return True
                else:
                    print("Корабль повреждён!")
                    return True

        self.field[dot.x][dot.y] = "T"
        print("Целься точнее!")
        return False

    def begin(self):
        self.busy_dots = []

    def defeat(self):
        return self.count_sunken_ships == len(self.ships)


class Player:
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy

    def ask(self):
        raise NotImplementedError

    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except BoardException as e:
                print(e)


class AI(Player):
    def ask(self):
        dot = Dot(randint(0, 5), randint(0, 5))
        print(f"Ход компьютера: {dot.x+1} {dot.y+1}")
        return dot

class User(Player):
    def ask(self):
        while True:
            cords = input("Покажите жестянке, где зимуют раки. Введите координаты: ").split()

            if len(cords) != 2:
                print("Введите 2 координаты")
                continue

            x, y = cords

            if not (x.isdigit() or not (y.isdigit())):
                print("Введите 2 числа")
                continue

            x, y = int(x), int(y)

            return Dot(x-1, y-1)


class Game:
    def __init__(self, size=6):
        self.size = size
        _player = self.random_board()
        _enemy = self.random_board()
        _enemy.hidden = True

        self._ai = AI(_enemy, _player)
        self._user = User(_player, _enemy)

    def try_board(self):
        lens = [3, 2, 2, 1, 1, 1, 1]
        board = Board(size = self.size)
        attempts = 0
        for lenght in lens:
            while True:
                attempts += 1
                if attempts > 2000:
                    return None
                ship = Ship(Dot(randint(0, self.size), randint(0, self.size)), lenght, randint(0, 1))
                try:
                    board.add_ship(ship)
                    break
                except BoardWrongShipException:
                    pass
        board.begin()
        return board

    def random_board(self):
        board = None
        while board is None:
            board = self.try_board()
        return board

    def greet(self):
        print("------------------------")
        print("    Приветствуем вас    ")
        print("         в игре         ")
        print("      морской  бой      ")
        print("------------------------")
        print("    формат ввода: x  y  ")
        print()
        print("    x - номер строки    ")
        print("    y - номер столбца   ")
        print("------------------------")

    def loop(self):
        num = 0
        while True:
            print("-"*20)
            print("Доска пользователя:")
            print(self._user.board)
            print("-"*20)
            print("Доска компьютера:")
            print(self._ai.board)
            print("-"*20)
            if num % 2 == 0:
                print("Внимание, Скайнет атакует ! Нужно уничтожить его корабли, без них он не умеет плавать !!!")
                repeat = self._user.move()
            else:
                print("Скайнет атакует")
                repeat = self._ai.move()
            if repeat:
                num -= 1

            if self._ai.board.defeat():
                print("-" * 20)
                print(self._user.board)
                print("-" * 20)
                print(self._ai.board)
                print("-" * 20)
                print("Скайнет повержен, но он ещё вернётся!!!")
                break

            if self._user.board.defeat():
                print("-" * 20)
                print(self._user.board)
                print("-" * 20)
                print(self._ai.board)
                print("-" * 20)
                print("Скайнет одержал временную победу, нужно перегруппироваться!!!")
                break
            num += 1

    def start(self):
        self.greet()
        self.loop()

g = Game()
g.start()
